#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Personal Assistant MCP Server
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from personal_assistant import (
    add_task, get_tasks, complete_task, 
    calculate, generate_password, text_stats,
    tasks_resource, calculator_history_resource,
    task_summary, productivity_tips
)

def demo_tasks():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"""
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏")
    print("=" * 50)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á
    print("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏:")
    print(add_task("–ò–∑—É—á–∏—Ç—å MCP –ø—Ä–æ—Ç–æ–∫–æ–ª", "–ü—Ä–æ—á–∏—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏ –ø—Ä–∏–º–µ—Ä—ã", "high"))
    print(add_task("–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥", "–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–µ–º–æ –ø—Ä–æ–µ–∫—Ç", "medium"))
    print(add_task("–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã", "low"))
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    print("üìã –í—Å–µ –∑–∞–¥–∞—á–∏:")
    print(get_tasks("all"))
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–¥–Ω—É –∑–∞–¥–∞—á—É
    print("‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É:")
    print(complete_task(1))
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    print("‚è≥ –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
    print(get_tasks("pending"))

def demo_calculator():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    print("üßÆ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
    print("=" * 50)
    
    expressions = [
        "2 + 2",
        "10 * 5 - 3",
        "(100 + 50) / 3",
        "2 ** 8"  # —Å—Ç–µ–ø–µ–Ω—å
    ]
    
    for expr in expressions:
        result = calculate(expr)
        print(f"üî¢ {result}")
    print()

def demo_password():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–∞—Ä–æ–ª–µ–π"""
    print("üîê –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π")
    print("=" * 50)
    
    print("üîë –ö–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤:")
    print(generate_password(8, False))
    print()
    
    print("üîë –î–ª–∏–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å —Å —Å–∏–º–≤–æ–ª–∞–º–∏:")
    print(generate_password(16, True))
    print()

def demo_text_analysis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞"""
    print("üìä –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞")
    print("=" * 50)
    
    sample_text = """
    –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. 
    –¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ —Ä–∞–∑–Ω—ã–µ —Å–ª–æ–≤–∞.
    MCP –ø—Ä–æ—Ç–æ–∫–æ–ª –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.
    –ü—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã —Å –ò–ò.
    """
    
    print("üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π —Ç–µ–∫—Å—Ç:")
    print(sample_text.strip())
    print()
    
    print("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
    print(text_stats(sample_text))

def demo_resources():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤"""
    print("üì¶ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –†–µ—Å—É—Ä—Å—ã")
    print("=" * 50)
    
    print("üìã –†–µ—Å—É—Ä—Å –∑–∞–¥–∞—á (JSON):")
    tasks_json = tasks_resource()
    print(tasks_json[:200] + "..." if len(tasks_json) > 200 else tasks_json)
    print()
    
    print("üßÆ –ò—Å—Ç–æ—Ä–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ (JSON):")
    calc_json = calculator_history_resource()
    print(calc_json[:200] + "..." if len(calc_json) > 200 else calc_json)
    print()

def demo_prompts():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤"""
    print("üí° –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è –ò–ò")
    print("=" * 50)
    
    print("üìä –°–≤–æ–¥–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º:")
    print(task_summary())
    print()
    
    print("üí™ –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
    print(productivity_tips("time_management"))
    print()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ Personal Assistant MCP Server - –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø")
    print("=" * 60)
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    demo_tasks()
    print("\n" + "="*60 + "\n")
    
    demo_calculator()
    print("\n" + "="*60 + "\n")
    
    demo_password()
    print("\n" + "="*60 + "\n")
    
    demo_text_analysis()
    print("\n" + "="*60 + "\n")
    
    demo_resources()
    print("\n" + "="*60 + "\n")
    
    demo_prompts()
    
    print("‚ú® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üîß –î–ª—è –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python personal_assistant.py")

if __name__ == "__main__":
    main() 