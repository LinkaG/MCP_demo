#!/usr/bin/env python3
"""
Personal Assistant MCP Server
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ MCP –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
"""

import json
import random
import string
import hashlib
from datetime import datetime
from typing import Dict, List, Any
from mcp.server.fastmcp import FastMCP

# –°–æ–∑–¥–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä
mcp = FastMCP("Personal Assistant")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –±—ã –ë–î)
tasks_storage: List[Dict[str, Any]] = []
calculator_history: List[Dict[str, Any]] = []

# =============================================================================
# TOOLS (–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)
# =============================================================================

@mcp.tool()
def add_task(title: str, description: str = "", priority: str = "medium") -> str:
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª.
    
    Args:
        title: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ (low, medium, high)
    """
    if priority not in ["low", "medium", "high"]:
        return "–û—à–∏–±–∫–∞: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å low, medium –∏–ª–∏ high"
    
    task = {
        "id": len(tasks_storage) + 1,
        "title": title,
        "description": description,
        "priority": priority,
        "completed": False,
        "created_at": datetime.now().isoformat()
    }
    
    tasks_storage.append(task)
    return f"‚úÖ –ó–∞–¥–∞—á–∞ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º {priority}"

@mcp.tool()
def get_tasks(status: str = "all") -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.
    
    Args:
        status: –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (all, completed, pending)
    """
    if not tasks_storage:
        return "üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç"
    
    filtered_tasks = tasks_storage
    if status == "completed":
        filtered_tasks = [t for t in tasks_storage if t["completed"]]
    elif status == "pending":
        filtered_tasks = [t for t in tasks_storage if not t["completed"]]
    
    if not filtered_tasks:
        return f"üìù –ù–µ—Ç –∑–∞–¥–∞—á —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'"
    
    result = f"üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á ({status}):\n\n"
    for task in filtered_tasks:
        status_icon = "‚úÖ" if task["completed"] else "‚è≥"
        priority_icon = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}[task["priority"]]
        
        result += f"{status_icon} {priority_icon} #{task['id']}: {task['title']}\n"
        if task["description"]:
            result += f"   üìÑ {task['description']}\n"
        result += f"   üìÖ –°–æ–∑–¥–∞–Ω–∞: {task['created_at'][:10]}\n\n"
    
    return result

@mcp.tool()
def complete_task(task_id: int) -> str:
    """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é.
    
    Args:
        task_id: ID –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    """
    for task in tasks_storage:
        if task["id"] == task_id:
            if task["completed"]:
                return f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ #{task_id} —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
            
            task["completed"] = True
            task["completed_at"] = datetime.now().isoformat()
            return f"üéâ –ó–∞–¥–∞—á–∞ #{task_id} '{task['title']}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!"
    
    return f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

@mcp.tool()
def calculate(expression: str) -> str:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ.
    
    Args:
        expression: –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
    """
    try:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
        allowed_chars = set("0123456789+-*/()., ")
        if not all(c in allowed_chars for c in expression):
            return "‚ùå –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –∏ –±–∞–∑–æ–≤—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"
        
        result = eval(expression)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        history_entry = {
            "expression": expression,
            "result": result,
            "timestamp": datetime.now().isoformat()
        }
        calculator_history.append(history_entry)
        
        return f"üßÆ {expression} = {result}"
    
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {str(e)}"

@mcp.tool()
def generate_password(length: int = 12, include_symbols: bool = True) -> str:
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å.
    
    Args:
        length: –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è (–æ—Ç 4 –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤)
        include_symbols: –í–∫–ª—é—á–∞—Ç—å –ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    """
    if length < 4 or length > 64:
        return "‚ùå –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 4 –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤"
    
    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤
    chars = string.ascii_letters + string.digits
    if include_symbols:
        chars += "!@#$%^&*()-_=+[]{}|;:,.<>?"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    password = ''.join(random.choice(chars) for _ in range(length))
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å–∏–ª—É –ø–∞—Ä–æ–ª—è
    strength = "–°–ª–∞–±—ã–π"
    if length >= 8 and include_symbols:
        strength = "–°–∏–ª—å–Ω—ã–π"
    elif length >= 6:
        strength = "–°—Ä–µ–¥–Ω–∏–π"
    
    return f"üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {password}\nüí™ –°–∏–ª–∞ –ø–∞—Ä–æ–ª—è: {strength}"

@mcp.tool()
def text_stats(text: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–∫—Å—Ç—É.
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    """
    if not text.strip():
        return "‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    words = text.split()
    chars = len(text)
    chars_no_spaces = len(text.replace(" ", ""))
    sentences = len([s for s in text.split(".") if s.strip()])
    paragraphs = len([p for p in text.split("\n\n") if p.strip()])
    
    # –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞
    word_freq = {}
    for word in words:
        word_clean = word.lower().strip(".,!?;:")
        word_freq[word_clean] = word_freq.get(word_clean, 0) + 1
    
    top_words = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)[:5]
    
    result = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞:

üìù –°–∏–º–≤–æ–ª–æ–≤: {chars}
üî§ –°–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤: {chars_no_spaces}
üìñ –°–ª–æ–≤: {len(words)}
üìÑ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {sentences}
üìã –ê–±–∑–∞—Ü–µ–≤: {paragraphs}

üîù –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞:"""
    
    for word, count in top_words:
        result += f"\n   ‚Ä¢ {word}: {count} —Ä–∞–∑"
    
    return result

# =============================================================================
# RESOURCES (–†–µ—Å—É—Ä—Å—ã)
# =============================================================================

@mcp.resource("tasks://list")
def tasks_resource() -> str:
    """–†–µ—Å—É—Ä—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ."""
    return json.dumps(tasks_storage, ensure_ascii=False, indent=2)

@mcp.resource("calculator://history")
def calculator_history_resource() -> str:
    """–†–µ—Å—É—Ä—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π."""
    return json.dumps(calculator_history, ensure_ascii=False, indent=2)

# =============================================================================
# PROMPTS (–ü—Ä–æ–º–ø—Ç—ã)
# =============================================================================

@mcp.prompt()
def task_summary() -> str:
    """–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º –¥–ª—è –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞."""
    total = len(tasks_storage)
    completed = len([t for t in tasks_storage if t["completed"]])
    pending = total - completed
    
    high_priority = len([t for t in tasks_storage if t["priority"] == "high" and not t["completed"]])
    
    return f"""–¢—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –í–æ—Ç —Ç–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á:
- –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total}
- –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed}
- –í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending}
- –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ): {high_priority}

–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞–¥–∞—á–∞–º–∏."""

@mcp.prompt()
def productivity_tips(focus_area: str = "general") -> str:
    """–ü—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    
    Args:
        focus_area: –û–±–ª–∞—Å—Ç—å —Ñ–æ–∫—É—Å–∞ (general, time_management, task_organization)
    """
    prompts = {
        "general": "–î–∞–π 3-5 —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –ø–æ–≤—ã—à–µ–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        "time_management": "–î–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–µ–º",
        "task_organization": "–î–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á"
    }
    
    base_prompt = prompts.get(focus_area, prompts["general"])
    
    return f"""–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ª–∏—á–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. 

{base_prompt}. 

–°–¥–µ–ª–∞–π –æ—Ç–≤–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º, —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è."""

# =============================================================================
# –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
# =============================================================================

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Personal Assistant MCP Server...")
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
    print("   ‚Ä¢ add_task - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
    print("   ‚Ä¢ get_tasks - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
    print("   ‚Ä¢ complete_task - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É")
    print("   ‚Ä¢ calculate - –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
    print("   ‚Ä¢ generate_password - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π")
    print("   ‚Ä¢ text_stats - –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞")
    print()
    print("üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:")
    print("   ‚Ä¢ tasks://list - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
    print("   ‚Ä¢ calculator://history - –∏—Å—Ç–æ—Ä–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π")
    print()
    print("üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã:")
    print("   ‚Ä¢ task_summary - —Å–≤–æ–¥–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º")
    print("   ‚Ä¢ productivity_tips - —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    print()
    
    mcp.run() 